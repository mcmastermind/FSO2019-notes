{"version":3,"sources":["components/Note.js","components/Button.js","components/Form.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","key","id","className","content","onClick","Button","text","Form","addNote","newNote","handleNoteChange","onSubmit","value","onChange","type","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","request","axios","get","nonExisting","date","then","response","data","concat","newObject","post","put","App","props","useState","notes","setNotes","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","event","preventDefault","target","length","noteObject","Date","toISOString","Math","random","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b0e56e6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? 'Make not Important' : 'Make Important'\r\n    return (\r\n        <li key={note.id} className='note'>\r\n            {note.content} <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Button = ({ text, onClick }) => {\r\n    return (\r\n        <button onClick={onClick}>{text}</button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\n\r\nconst Form = ({ addNote, newNote, handleNoteChange }) => {\r\n\r\n    return (\r\n        <form onSubmit={addNote}>\r\n            <input value={newNote} onChange={handleNoteChange}/>\r\n            <button type=\"submit\">Save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import axios from 'axios'\r\n\r\nlet baseUrl = ''\r\nconst useHeroku = true\r\n\r\nuseHeroku ? baseUrl = 'https://powerful-everglades-97747.herokuapp.com/notes' : baseUrl = 'http://localhost:3001/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n    const request =  axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request =  axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Button from './components/Button'\r\nimport Form from './components/Form'\r\nimport Notification from './components/Notification'\r\nimport Footer from './components/Footer'\r\nimport noteService from './services/notes'\r\n\r\nconst App = (props) => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true) \r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    useEffect(() => {\r\n        console.log('effect')\r\n        noteService\r\n            .getAll()\r\n            .then(initialNotes => {\r\n                setNotes(initialNotes)\r\n            })\r\n    },[])\r\n\r\n    const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\r\n\r\n    const toggleImportanceOf = id => {\r\n        const note = notes.find(n => n.id === id)\r\n        const changedNote = { ...note, important: !note.important }\r\n\r\n        noteService\r\n            .update( id, changedNote )\r\n            .then(returnedNote => {\r\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n            })\r\n            .catch(error => {\r\n                setErrorMessage(\r\n                    `Note '${note.content}' was already removed from server.`\r\n                )\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n                setNotes(notes.filter(n => n.id !== id))\r\n            })\r\n    }\r\n\r\n    const rows = () => notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />)\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        console.log('button clicked', event.target)\r\n\r\n        if( newNote.length === 0 ) {\r\n            alert('Enter a note.')\r\n            return\r\n        }\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5,\r\n            id: notes.length + 1\r\n        }\r\n\r\n        noteService\r\n            .create(noteObject)\r\n            .then(returnedNote => {\r\n                setNotes(notes.concat(returnedNote))\r\n                setNewNote('')\r\n            })\r\n    }\r\n\r\n    const handleNoteChange = (event) => {\r\n        console.log(event.target.value)\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <Button text={showAll ? 'Show Important' : 'Show All'} onClick={() => setShowAll(!showAll)}/>\r\n            <ul>\r\n                {rows()}\r\n            </ul>\r\n            <Form addNote={addNote} newNote={newNote} handleNoteChange={handleNoteChange}/>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}